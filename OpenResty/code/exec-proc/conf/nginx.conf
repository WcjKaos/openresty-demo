user root;
worker_processes 1;
events {
    worker_connections 1024;
}

error_log logs/debug.log debug;


http {
    lua_shared_dict users 1m;

    init_by_lua_block {
        cjson = require "cjson"
        local dogs = ngx.shared.users;

        dogs:set("Tom", 50)
        dogs:set("Lucy",100)

        ngx.log(ngx.DEBUG, "init_by_lua")
    }

    # init_worker_by_lua_file lua/init_worker.lua;

    server {

        listen 8080 reuseport;
        server_name localhost;

        location /test_phase {
            set $a 10;
            echo $a;
            set $a 100;
            echo $a;
        }

        location /exec_phase {
            content_by_lua_block {
                ngx.log(ngx.DEBUG, "content_by_lua")
            }
            log_by_lua_block {
                ngx.log(ngx.DEBUG, "log_by_lua")
            }
            body_filter_by_lua_block {
                ngx.log(ngx.DEBUG, "body_filter_by_lua")
            }
            header_filter_by_lua_block {
                ngx.log(ngx.DEBUG, "header_filter_by_lua")
            }
            access_by_lua_block {
                ngx.log(ngx.DEBUG, "access_by_lua")
            }
            set_by_lua_block $a {
                ngx.log(ngx.DEBUG, "set_by_lua")
            }
            rewrite_by_lua_block {
                ngx.log(ngx.DEBUG, "rewrite_by_lua")
            }
        }

        #location /init_cjson {
        #
        #    content_by_lua_block {
        #        local data = {
        #            name="cjson", age=2
        #        }
        #        ngx.say(cjson.encode(data))
        #
        #        local users = ngx.shared.users;
        #        ngx.say(users:get("Tom"))
        #    }
        #}

        location /hello {
            charset utf-8;
            set_by_lua_block $to_type {
                local langType = ngx.var.arg_langType
                ngx.log(ngx.ERR,"langType=",langType)
                if langType == "english" then
                return "1"
                elseif langType == "chinese" then
                return "2"
                end
            }
            if ($to_type = "1") {
                echo "hello world" ;
            }
            if ($to_type = "2") {
                echo "你好 世界" ;
            }
        }

        location /break/ {
            root html;
            rewrite ^/break/(.*) /$1 break; #----break；$1 会在根目录下的查找$1文件
        }

        location /last/ {
            rewrite ^/last/(.*) /test/$1 last; #----last；/test/$1 会重新走一遍location匹配流程
        }

        location /test/ {
            echo "test page";
        }

        location /lua_rewrite_baidu {
            rewrite_by_lua_block {
                if ngx.req.get_uri_args()["jump"] == "1" then
                return ngx.redirect("https://www.baidu.com", 302)
                end
            }
            echo "no rewrite";
        }


        location /rewrite_phase_disable {
            set $sum 0;
            rewrite_by_lua 'ngx.var.sum = tonumber(ngx.var.arg_a) + tonumber(ngx.var.arg_b)';
            if ($sum = 10) {
                rewrite ^ /after_rewrite redirect;
                break;
            }
            echo "sum = $sum";
        }

        location /rewrite_phase_enable {
            set $sum 0;
            rewrite_by_lua_block {
                ngx.var.sum = tonumber(ngx.var.arg_a) + tonumber(ngx.var.arg_b)
                if ngx.var.sum == 10 then
                return ngx.redirect("/after_rewrite");
                end
            }

            echo "sum = $sum";
        }

        location /after_rewrite {
            echo "after_rewrite";
        }


        location /access {
            access_by_lua_block {
                if ngx.var.arg_a == "1" then
                return
                end
                if ngx.var.remote_addr == "127.0.0.1" then
                return
                end
                ngx.exit(403)
            }

            echo "access";
        }

        location /nginx_acess {
            allow 127.0.0.1;
            deny all;
            echo "hello world";
        }

        location /content {
            # 重写阶段
            set $age 1;
            rewrite_by_lua "ngx.var.age = ngx.var.age + 1";

            # 访问阶段
            allow 127.0.0.1;
            access_by_lua "ngx.var.age = ngx.var.age * 2";

            # 内容阶段
            echo "age = $age";
        }

        location /content1 {
            echo hello;
            content_by_lua 'ngx.say("world")';
        }

        location /content2 {
            echo hello;
            echo world;
        }

        location / {
            root html;
            index index.html;
            autoindex on;
        }

        location /index.html {
            set $a 32;
            echo "a = $a";
        }

        location /header_filter {
            header_filter_by_lua 'ngx.header.name = "james"';
            echo "Hello World!";
        }

    }
}