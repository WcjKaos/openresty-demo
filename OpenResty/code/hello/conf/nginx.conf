user root;
worker_processes 1;
events {
	worker_connections 1024;
}

http {

	lua_package_path "$prefix/lua/?.lua;;";
	lua_shared_dict dictCount 1m;


	server {
		listen 8080 reuseport;

		location = /hello {
			default_type application/octet-stream;
			content_by_lua_block {
				for i = 1, 4 do
				ngx.say("hello world", i)
				ngx.flush(true)
				ngx.sleep(1) -- sec
				end
			}
		}

		location / {
			default_type text/html;
			root html;
		}

		location /testlua {
			content_by_lua "ngx.say('content_by_lua')";
		}

		location /testLuaContent {
			default_type text/plain;
			content_by_lua_block {
				ngx.say("content_by_lua_block")
			}
		}

		location /testLuaFile {
			default_type text/plain;
			content_by_lua_file lua/test.lua;
		}

		location /shareVar {
			default_type text/plain;
			content_by_lua_block {
				local mod = require "count"
				local cnt = mod.luacache()
				ngx.say("lua cache counter = ", cnt)

				local dictCount = ngx.shared.dictCount
				local shareCount = dictCount:get("shareCounter")

				if shareCount then
				dictCount:incr("shareCounter", 1)
				shareCount = dictCount:get("shareCounter") -- 更新后的值
				else
				dictCount:set("shareCounter", 1)
				shareCount = 1 -- 初始值
				end

				ngx.say("dict cache counter = ", shareCount)
			}
		}
	}
}