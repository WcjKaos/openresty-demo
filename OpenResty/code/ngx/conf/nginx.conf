user root;
worker_processes 1;
events {
    worker_connections 1024;
}

http {
    server {
        listen 8080 reuseport;

        # http://localhost:8080/var?a=1&b=2
        location /var {
            set $c 3;
            default_type text/plain;
            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                local c = tonumber(ngx.var.c) or 0
                ngx.say("sum:", a + b + c )
                return ngx.exit(ngx.HTTP_OK)
            }
        }

        # 对于nginx location中使用正则捕获的捕获组可以使用ngx.var[捕获组数字]获取；
        #  http://localhost:8080/var?a=111
        location ~ ^/var/([0-9]+) {
            content_by_lua_block {
                ngx.say("var[1]:", ngx.var[1] )
            }
        }

        location /req {
            default_type text/plain;
            content_by_lua_file lua/test.lua;
        }

        location /encode {
            default_type text/plain;
            content_by_lua_file lua/encode.lua;
        }

        location /regex {
            default_type text/plain;
            content_by_lua_file lua/regex.lua;
        }


        location = /target {
            content_by_lua_block {
                ngx.say('I am target')
            }
        }

        location = /from {
            content_by_lua_block {
                return ngx.redirect('/target');
            }
        }


        location /share_var {
            rewrite_by_lua_block {
                ngx.ctx.value = 5
            }
            access_by_lua_block {
                ngx.ctx.value = ngx.ctx.value + 10
            }
            content_by_lua_block {
                ngx.say(ngx.ctx.value)
            }
        }

        location /son {
            content_by_lua_block {
                ngx.say("is subrequest: ",ngx.is_subrequest)
                ngx.say("son pre: ", ngx.ctx.count)
                ngx.ctx.count = 5
                ngx.say("son post: ", ngx.ctx.count)
            }
        }

        location /father {
            content_by_lua_block {
                ngx.ctx.count = 10
                ngx.say("father pre: ", ngx.ctx.count)
                local res = ngx.location.capture("/son")
                ngx.print(res.body)
                ngx.say("father post: ", ngx.ctx.count)
            }
        }
    }
}


# 反向代理
# Tcp代理
stream {
    upstream tcp_proxy {
        server backend_server_ip:backend_server_port;
    }
    server {
        listen tcp_proxy_listen_port;
        proxy_pass tcp_proxy;
    }
}

# http代理
http {
    upstream http_proxy {
        server backend_server_ip:backend_server_port;
    }
    server {
        listen http_proxy_listen_port;
        
        # 静态文件服务
        location / {
            root html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        
        location /api {
            proxy_pass http://http_proxy;
        }
    }
}
